# bot.py
import os
import logging
import json  # ‚úÖ –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç json –∑–¥–µ—Å—å
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from openai import OpenAI  # ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
STEP_FIO, STEP_DATES, STEP_REGION, STEP_KNOWN, STEP_GOAL, STEP_CONTACT = range(6)

# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–µ–π—Å–∞
def classify_case(text):
    text = text.lower()
    if any(k in text for k in ["–∞—Ä–µ—Å—Ç–æ–≤–∞–Ω", "—Ä–∞—Å—Å—Ç—Ä–µ–ª—è–Ω", "—Ä–µ–∞–±–∏–ª–∏—Ç–∏—Ä–æ–≤–∞–Ω", "—Ç—Ä–æ–π–∫–∞", "–Ω–∫–≤–¥", "–∫-—Ä", "—à–ø–∏–æ–Ω"]):
        return "—Ä–µ–ø—Ä–µ—Å—Å–∏–∏"
    elif any(k in text for k in ["–ø–ª–µ–Ω", "—à—Ç–∞–ª–∞–≥", "–æ—Ñ–ª–∞–≥", "arolsen", "wast", "–≤–æ–µ–Ω–Ω–æ–ø–ª–µ–Ω–Ω—ã–π"]):
        return "–ø–ª–µ–Ω"
    elif any(k in text for k in ["–æ—Å—É–∂–¥—ë–Ω", "—É–≥–æ–ª–æ–≤–Ω–æ–µ –¥–µ–ª–æ", "—Å—Ä–æ–∫", "—Ç—é—Ä—å–º–∞", "–º—É—Ä–º–∞—à–∏"]):
        return "–æ—Å—É–∂–¥—ë–Ω"
    elif any(k in text for k in ["–∫—É–ª–∞–∫", "—Ä–∞—Å–∫—É–ª–∞—á–µ–Ω—ã", "—Å–ø–µ—Ü–ø–µ—Ä–µ—Å–µ–ª–µ–Ω–∏–µ"]):
        return "—Ä–∞—Å–∫—É–ª–∞—á–µ–Ω–Ω—ã–µ"
    elif any(k in text for k in ["–≤–Ω–µ–±—Ä–∞—á–Ω—ã–π", "–Ω–µ –±—ã–ª –∂–µ–Ω–∞—Ç", "–æ—Ç—Ü–æ–≤—Å—Ç–≤–æ", "—Ä–æ–¥–∏–ª—Å—è –æ—Ç"]):
        return "–≤–Ω–µ–±—Ä–∞—á–Ω–æ–µ"
    elif "—Ä–æ–¥–æ—Å–ª–æ–≤–Ω–∞—è" in text or "–ø—Ä–µ–¥–∫–∏" in text:
        return "—Ä–æ–¥–æ—Å–ª–æ–≤–Ω–∞—è"
    else:
        return "–æ–±—â–∏–π"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ Rodoslovnaya.pro.\n"
        "–ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –í–∞—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—É–¥—å–±–µ –í–∞—à–∏—Ö –ø—Ä–µ–¥–∫–æ–≤ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –∏ –∞—Ä—Ö–∏–≤–∞–º.\n"
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–µ–¥–∫–µ, —á—å—é –∏—Å—Ç–æ—Ä–∏—é –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å.\n\n"
        "üìå –ù–∞—á–Ω—ë–º —Å –§–ò–û –ø—Ä–µ–¥–∫–∞:"
    )
    return STEP_FIO

async def handle_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["fio"] = update.message.text
    await update.message.reply_text("üìÖ –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –≥–æ–¥—ã –∂–∏–∑–Ω–∏ –ø—Ä–µ–¥–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1890‚Äì1942):")
    return STEP_DATES

async def handle_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["dates"] = update.message.text
    await update.message.reply_text(
    "üìç –ì–¥–µ –∂–∏–ª –ø—Ä–µ–¥–æ–∫? –£–∫–∞–∂–∏—Ç–µ:\n"
    "‚Ä¢ –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–µ—Ä–µ–≤–Ω—è, —Å–µ–ª–æ, –≥–æ—Ä–æ–¥)\n"
    "‚Ä¢ –ì–¥–µ –ø—Ä–æ–∂–∏–≤–∞–ª\n"
    "‚Ä¢ –ì–¥–µ —É–º–µ—Ä –∏ –ø–æ—Ö–æ—Ä–æ–Ω–µ–Ω (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ)\n\n"
    "–ü—Ä–∏–º–µ—Ä: —Ä–æ–¥–∏–ª—Å—è –ü–µ—Ç—Ä–æ–≤–æ, –†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª., –∑–∞—Ç–µ–º –û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, —É–º–µ—Ä –≤ –ê–ª–µ–∫—Å–∏–Ω–µ –¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"
)
    return STEP_REGION

async def handle_region(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["region"] = update.message.text
    await update.message.reply_text(
    "üìö –ß—Ç–æ –í—ã —É–∂–µ –∑–Ω–∞–µ—Ç–µ –æ –ø—Ä–µ–¥–∫–µ?\n"
    "–£–∫–∞–∂–∏—Ç–µ –≤—Å—ë, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏ –≤ —Å–µ–º—å–µ:\n"
    "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è, –≤–æ–µ–Ω–Ω–∞—è —Å–ª—É–∂–±–∞\n"
    "‚Ä¢ –°—É–¥—å–±–∞ –≤ –≤–æ–π–Ω—É, —Ä–µ–ø—Ä–µ—Å—Å–∏–∏, –ø–ª–µ–Ω\n"
    "‚Ä¢ –†–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏ (–æ—Ç–µ—Ü, –º–∞—Ç—å ‚Äî –ø–æ –∏–º–µ–Ω–∏-–æ—Ç—á–µ—Å—Ç–≤—É)\n"
    "‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–¥–µ–ª–∞–ª –≤–æ–ª–æ–∫—É—à–∏¬ª, ¬´–∫–∞–ø–∏—Ç–∞–Ω —Å –ö—Ä–æ–Ω—à—Ç–∞–¥—Ç–∞¬ª)"
)
    return STEP_KNOWN

async def handle_known(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["known"] = update.message.text
    await update.message.reply_text(
    "üéØ –ß—Ç–æ –±—ã –í—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–µ–¥–∫–µ –∏ –µ–≥–æ —Ñ–∞–º–∏–ª—å–Ω–æ–º —Ä–æ–¥–µ?\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ:\n"
    "‚Ä¢ –ö—Ç–æ –±—ã–ª–∏ –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª–∏?\n"
    "‚Ä¢ –ì–¥–µ –æ–Ω —Ä–æ–¥–∏–ª—Å—è –∏ –≥–¥–µ –ø–æ—Ö–æ—Ä–æ–Ω–µ–Ω?\n"
    "‚Ä¢ –ö–∞–∫–æ–≤–∞ –±—ã–ª–∞ –µ–≥–æ —Å—É–¥—å–±–∞ –≤ –≤–æ–π–Ω—É –∏–ª–∏ –≤ —Ä–µ–ø—Ä–µ—Å—Å–∏—è—Ö?\n"
    "‚Ä¢ –ò–∑ –∫–∞–∫–æ–≥–æ –æ–Ω —Ä–æ–¥–∞, –µ—Å—Ç—å –ª–∏ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏–µ –ø—Ä–µ–¥–∫–∏?\n"
    "‚Ä¢ –ß—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –µ–≥–æ –ø–æ–¥–≤–∏–≥ –∏–ª–∏ —Ç—Ä—É–¥–æ–≤–æ–π –ø—É—Ç—å?"
)
    return STEP_GOAL

async def handle_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["goal"] = update.message.text
    await update.message.reply_text("üì¨ –û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, Telegram –∏–ª–∏ email –¥–ª—è —Å–≤—è–∑–∏:")
    return STEP_CONTACT

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact"] = update.message.text
    data = context.user_data
    case_type = classify_case(f"{data['known']} {data['goal']}")
    data["case_type"] = case_type
    
    await update.message.reply_text(
    "‚è≥ <b> üîç –°–ø–∞—Å–∏–±–æ –∑–∞ –∞–Ω–∫–µ—Ç—É!</b>\n"
    "üß† Rodoslovnaya.pro –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∞—Ä—Ö–∏–≤–∞–º –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º‚Ä¶\n"
    "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ ‚Äî —Å–∫–æ—Ä–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –ø–æ–∏—Å–∫–∞.",
    parse_mode="HTML"
)
    await update.message.reply_chat_action("typing")
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
    prompt = f"""
–°–æ—Å—Ç–∞–≤—å –ø–æ—à–∞–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö:

üìå –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
–§–ò–û: {data['fio']}
–ì–æ–¥—ã –∂–∏–∑–Ω–∏: {data['dates']}
–ú–µ—Å—Ç–æ: {data['region']}
–ò–∑–≤–µ—Å—Ç–Ω–æ: {data['known']}
–¶–µ–ª—å: {data['goal']}

üß† –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç Rodoslovnaya.pro:

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: "üìå –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "üîç –ü–û–®–ê–ì–û–í–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø", "‚úÖ –ß–µ–∫-–ª–∏—Å—Ç", "üì¨ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?"
- –° —É–∫–∞–∑–∞–Ω–∏–µ–º **–≥–ª—É–±–∏–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤**: –ó–ê–ì–°—ã (—Å 1920-—Ö –ø–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è), –º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∫–Ω–∏–≥–∏ (c 1700 –¥–æ 1917), —Ä–µ–≤–∏–∑—Å–∫–∏–µ —Å–∫–∞–∑–∫–∏ (c 1700 –¥–æ 1858), –∏—Å–ø–æ–≤–µ–¥–Ω—ã–µ –≤–µ–¥–æ–º–æ—Å—Ç–∏ (c 1700 –¥–æ 1880-—Ö), –¥–∞–Ω–Ω—ã–µ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∏ 1916 –≥–æ–¥–∞, –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–æ–±—â–µ–π –ø–µ—Ä–µ–ø–∏—Å—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è 1897
- –° **–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏** –Ω–∞ –∞—Ä—Ö–∏–≤—ã, –ó–ê–ì–°—ã, –æ–Ω–ª–∞–π–Ω-—Ä–µ—Å—É—Ä—Å—ã (–Ω–µ –æ–±—â–∏–µ, –∞ —Ç–æ—á–Ω—ã–µ: https://obd-memorial.ru, https://pamyat-naroda.ru, https://arolsen-archives.org)
- –° **—Ç–æ—á–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –∞—Ä—Ö–∏–≤–∞–º**:
  ‚Ä¢ –ï—Å–ª–∏ –ø—Ä–µ–¥–æ–∫ –±—ã–ª –≤ –ø–ª–µ–Ω—É –∏–ª–∏ —Ä–µ–ø–∞—Ç—Ä–∏–∏—Ä–æ–≤–∞–Ω ‚Äî —É–∫–∞–∂–∏ **–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞—Ä—Ö–∏–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω—É** (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ì–æ—Å–∞—Ä—Ö–∏–≤ –ú—É—Ä–º–∞–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏, —Ñ–æ–Ω–¥ –†-140)
  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ "—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è 20.06.2024.xlsx"
  ‚Ä¢ –£–∫–∞–∂–∏: "—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ-–ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ –¥–µ–ª–∞", "—Ç–∞–±–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏", "—Å–ø–∏—Å–∫–∏ —Ä–µ–ø–∞—Ç—Ä–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö"
- –° **–ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏** (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ó–ê–ì–° ‚Äî 350‚Äì400 ‚ÇΩ, –∞—Ä—Ö–∏–≤ ‚Äî –æ—Ç 500 ‚ÇΩ)
- –° —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –ø–æ **–î–ù–ö-—Ç–µ—Å—Ç—É (Genotek, MyHeritage)** –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤
- –ë–µ–∑ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑ ‚Äî —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    """

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise EnvironmentError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
        client = OpenAI(api_key=api_key)
    
        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ–∞–ª–æ–≥. –ü–∏—à–∏ —á—ë—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏, —Ç–∞—Ä–∏—Ñ–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏. –ù–µ –¥–æ–±–∞–≤–ª—è–π –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤—Ä–æ–¥–µ '–í–æ—Ç –ø–æ—à–∞–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è' ‚Äî –Ω–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1500,
            temperature=0.7
        )
        ai_response = completion.choices[0].message.content.strip()
    
        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å
        response = f"""üß† Rodoslovnaya.PRO —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç:
    
    {ai_response}
    
    üì¨ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?
    –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Å–∞–π—Ç–µ rodoslovnaya.pro,
    –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ predki@rodoslovnaya.pro
    –∏–ª–∏ –≤ Telegram @rodoslovnaya_pro"""
    except Exception as e:
        response = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–∞: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await update.message.reply_text(response)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
    save_to_google_sheets({
        "fio": data.get("fio"),
        "dates": data.get("dates"),
        "region": data.get("region"),
        "known": data.get("known"),
        "goal": data.get("goal"),
        "contact": data.get("contact"),
        "case_type": case_type,
        "recommendations": response
    })

    return ConversationHandler.END

def save_to_google_sheets(data):
    try:
        print("‚úÖ 1. –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google –¢–∞–±–ª–∏—Ü—É...")
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive"
        ]  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω—ã –ø—Ä–æ–±–µ–ª—ã
        
        json_creds = os.getenv("GOOGLE_CREDENTIALS")
        if not json_creds:
            raise EnvironmentError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        creds_dict = json.loads(json_creds)
        print("‚úÖ 2. JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")

        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        print("‚úÖ 3. –£—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")

        client = gspread.authorize(creds)
        print("‚úÖ 4. –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Google Sheets API")

        sheet = client.open_by_url(os.getenv("GOOGLE_SHEET_URL")).sheet1
        print("‚úÖ 5. –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Ç–∞–±–ª–∏—Ü–µ")

        row = [
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            data.get("fio"),
            data.get("dates"),
            data.get("region"),
            data.get("known"),
            data.get("goal"),
            data.get("contact"),
            data.get("case_type"),
            data.get("recommendations")
        ]
        sheet.append_row(row)
        print("‚úÖ 6. –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù–´ –í –¢–ê–ë–õ–ò–¶–£!")
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_TOKEN")
        return
    # üîΩ –î–û–ë–ê–í–¨ –°–Æ–î–ê –ü–†–ò–ù–¢ üîΩ
    print(f"TELEGRAM_TOKEN: {'–î–∞, –µ—Å—Ç—å' if TOKEN else '–ù–µ—Ç!'}")
    print(f"OPENAI_API_KEY: {os.getenv('OPENAI_API_KEY')}")
    print(f"GOOGLE_SHEET_URL: {os.getenv('GOOGLE_SHEET_URL')}")
    # üîº –î–û–ë–ê–í–¨ –°–Æ–î–ê –ü–†–ò–ù–¢ üîº

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API Key
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        logger.error("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã.")
        return
        
    # –°–æ–∑–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            STEP_FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_fio)],
            STEP_DATES: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_dates)],
            STEP_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_region)],
            STEP_KNOWN: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_known)],
            STEP_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_goal)],
            STEP_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contact)],
        },
        fallbacks=[]
    )

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = (
        Application.builder()
        .token(TOKEN)
        .read_timeout(30)
        .write_timeout(30)
        .connect_timeout(30)
        .pool_timeout(30)
        .build()
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    app.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling()

# ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º main()
if __name__ == "__main__":
    main()
