# bot.py
import os
import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import openai
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API-–∫–ª—é—á OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
STEP_FIO, STEP_DATES, STEP_REGION, STEP_KNOWN, STEP_GOAL, STEP_CONTACT = range(6)

# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–µ–π—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
def classify_case(text):
    text = text.lower()
    if any(k in text for k in ["–∞—Ä–µ—Å—Ç–æ–≤–∞–Ω", "—Ä–∞—Å—Å—Ç—Ä–µ–ª—è–Ω", "—Ä–µ–∞–±–∏–ª–∏—Ç–∏—Ä–æ–≤–∞–Ω", "—Ç—Ä–æ–π–∫–∞", "–Ω–∫–≤–¥", "–∫-—Ä", "—à–ø–∏–æ–Ω"]):
        return "—Ä–µ–ø—Ä–µ—Å—Å–∏–∏"
    elif any(k in text for k in ["–ø–ª–µ–Ω", "—à—Ç–∞–ª–∞–≥", "–æ—Ñ–ª–∞–≥", "arolsen", "wast", "–≤–æ–µ–Ω–Ω–æ–ø–ª–µ–Ω–Ω—ã–π"]):
        return "–ø–ª–µ–Ω"
    elif any(k in text for k in ["–æ—Å—É–∂–¥—ë–Ω", "—É–≥–æ–ª–æ–≤–Ω–æ–µ –¥–µ–ª–æ", "—Å—Ä–æ–∫", "—Ç—é—Ä—å–º–∞", "–º—É—Ä–º–∞—à–∏"]):
        return "–æ—Å—É–∂–¥—ë–Ω"
    elif any(k in text for k in ["–∫—É–ª–∞–∫", "—Ä–∞—Å–∫—É–ª–∞—á–µ–Ω—ã", "—Å–ø–µ—Ü–ø–µ—Ä–µ—Å–µ–ª–µ–Ω–∏–µ"]):
        return "—Ä–∞—Å–∫—É–ª–∞—á–µ–Ω–Ω—ã–µ"
    elif any(k in text for k in ["–≤–Ω–µ–±—Ä–∞—á–Ω—ã–π", "–Ω–µ –±—ã–ª –∂–µ–Ω–∞—Ç", "–æ—Ç—Ü–æ–≤—Å—Ç–≤–æ", "—Ä–æ–¥–∏–ª—Å—è –æ—Ç"]):
        return "–≤–Ω–µ–±—Ä–∞—á–Ω–æ–µ"
    elif "—Ä–æ–¥–æ—Å–ª–æ–≤–Ω–∞—è" in text or "–ø—Ä–µ–¥–∫–∏" in text:
        return "—Ä–æ–¥–æ—Å–ª–æ–≤–Ω–∞—è"
    else:
        return "–æ–±—â–∏–π"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ Rodoslovnaya.pro.\n"
        "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–∫–æ–≤.\n"
        "–ù–∞–ø–∏—à–∏ –§–ò–û –ø—Ä–µ–¥–∫–∞, –∏—Å—Ç–æ—Ä–∏—é –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å."
    )
    return STEP_FIO

async def handle_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["fio"] = update.message.text
    await update.message.reply_text("üìÜ –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –≥–æ–¥—ã –∂–∏–∑–Ω–∏?")
    return STEP_DATES

async def handle_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["dates"] = update.message.text
    await update.message.reply_text("üìç –ì–¥–µ –∂–∏–ª –ø—Ä–µ–¥–æ–∫?")
    return STEP_REGION

async def handle_region(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["region"] = update.message.text
    await update.message.reply_text("üìÑ –ß—Ç–æ —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å –æ –Ω—ë–º?")
    return STEP_KNOWN

async def handle_known(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["known"] = update.message.text
    await update.message.reply_text("üîç –ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?")
    return STEP_GOAL

async def handle_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["goal"] = update.message.text
    await update.message.reply_text("üì¨ –û—Å—Ç–∞–≤—å Telegram –∏–ª–∏ email –¥–ª—è —Å–≤—è–∑–∏:")
    return STEP_CONTACT

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact"] = update.message.text
    data = context.user_data

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
    prompt = f"""
–°–æ—Å—Ç–∞–≤—å –ø–æ—à–∞–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö:

üìå –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
–§–ò–û: {data['fio']}
–ì–æ–¥—ã –∂–∏–∑–Ω–∏: {data['dates']}
–ú–µ—Å—Ç–æ: {data['region']}
–ò–∑–≤–µ—Å—Ç–Ω–æ: {data['known']}
–¶–µ–ª—å: {data['goal']}

üß† –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç Rodoslovnaya.pro:

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ: "üìå –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "üîç –ü–û–®–ê–ì–û–í–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø", "‚úÖ –ß–µ–∫-–ª–∏—Å—Ç"
- –° –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏, —Å—Å—ã–ª–∫–∞–º–∏, —Ç–∞—Ä–∏—Ñ–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ó–ê–ì–° ‚Äî 350‚Äì400 ‚ÇΩ)
- –£–∫–∞–∑–∞–Ω–∏–µ–º –≥–ª—É–±–∏–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∫–Ω–∏–≥–∏ ‚Äî –¥–æ 1917, —Ä–µ–≤–∏–∑—Å–∫–∏–µ —Å–∫–∞–∑–∫–∏ ‚Äî –¥–æ 1858 –∏ —Ç.–¥.)
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ë–µ–∑ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑
- –í–∫–ª—é—á–∞–π —Å—Å—ã–ª–∫–∏: –û–ë–î –ú–µ–º–æ—Ä–∏–∞–ª, –ü–∞–º—è—Ç—å –Ω–∞—Ä–æ–¥–∞, –ü–æ–¥–≤–∏–≥ –Ω–∞—Ä–æ–¥–∞, Arolsen, Genotek
- –£–∫–∞–∑—ã–≤–∞–π, –≥–¥–µ –∏—Å–∫–∞—Ç—å (–∞—Ä—Ö–∏–≤—ã, –ó–ê–ì–°—ã, —Ñ–æ—Ä—É–º—ã)
    """

    try:
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ–∞–ª–æ–≥. –ü–∏—à–∏ —á—ë—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏, —Ç–∞—Ä–∏—Ñ–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1500,
            temperature=0.7
        )
        response = completion.choices[0].message.content.strip()
    except Exception as e:
        response = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–∞: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(response)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google –¢–∞–±–ª–∏—Ü—É (–≤–∫–ª—é—á–∞—è –æ—Ç–≤–µ—Ç)
    save_to_google_sheets({
        "fio": data.get("fio"),
        "dates": data.get("dates"),
        "region": data.get("region"),
        "known": data.get("known"),
        "goal": data.get("goal"),
        "contact": data.get("contact"),
        "case_type": classify_case(f"{data['known']} {data['goal']}"),
        "recommendations": response
    })

    return ConversationHandler.END

def save_to_google_sheets(data):
    try:
        print("‚úÖ 1. –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google –¢–∞–±–ª–∏—Ü—É...")
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        
        # –ß–∏—Ç–∞–µ–º JSON –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        json_creds = os.getenv("GOOGLE_CREDENTIALS")
        if not json_creds:
            raise EnvironmentError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        import json
        creds_dict = json.loads(json_creds)
        print("‚úÖ 2. JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")

        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        print("‚úÖ 3. –£—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")

        client = gspread.authorize(creds)
        print("‚úÖ 4. –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Google Sheets API")

        sheet = client.open_by_url(os.getenv("GOOGLE_SHEET_URL")).sheet1
        print("‚úÖ 5. –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Ç–∞–±–ª–∏—Ü–µ")

        row = [
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            data.get("fio"),
            data.get("dates"),
            data.get("region"),
            data.get("known"),
            data.get("goal"),
            data.get("contact"),
            data.get("case_type"),
            data.get("recommendations")  # –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        ]
        sheet.append_row(row)
        print("‚úÖ 6. –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù–´ –í –¢–ê–ë–õ–ò–¶–£!")
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_TOKEN")
        return

    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            STEP_FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_fio)],
            STEP_DATES: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_dates)],
            STEP_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_region)],
            STEP_KNOWN: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_known)],
            STEP_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_goal)],
            STEP_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contact)],
        },
        fallbacks=[]
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
